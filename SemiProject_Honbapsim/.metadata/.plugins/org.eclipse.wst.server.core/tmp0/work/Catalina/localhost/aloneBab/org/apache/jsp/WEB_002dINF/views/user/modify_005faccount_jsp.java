/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.89
 * Generated at: 2024-07-19 01:09:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class modify_005faccount_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("fn:split", org.apache.taglibs.standard.functions.Functions.class, "split", new Class[] {java.lang.String.class, java.lang.String.class});
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1718959152000L));
    _jspx_dependants.put("jar:file:/D:/SemiProject_Honbapsim/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Semi_Project/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fn.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"resources/css/modifyAcc.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("<style>\r\n");
      out.write("	@font-face {\r\n");
      out.write("	    font-family: 'MinSans-Regular';\r\n");
      out.write("	    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2201-2@1.0/MinSans-Regular.woff') format('woff');\r\n");
      out.write("	    font-weight: normal;\r\n");
      out.write("	    font-style: normal;\r\n");
      out.write("	}\r\n");
      out.write("	@font-face {\r\n");
      out.write("	    font-family: 'MinSans-Bold';\r\n");
      out.write("	    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2201-2@1.0/MinSans-Bold.woff') format('woff');\r\n");
      out.write("	    font-weight: normal;\r\n");
      out.write("	    font-style: normal;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"margin: 0px; background-color: #FFFBF2;\">\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"mainDiv\">\r\n");
      out.write("		<div class=\"modify title\">\r\n");
      out.write("			<p>회원정보 수정</p>\r\n");
      out.write("		</div>\r\n");
      out.write("		<form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/modify.user\" method=\"post\">\r\n");
      out.write("			<div class=\"modify_account_div\">\r\n");
      out.write("				<table class=\"modify_account_table\" border=\"1\">\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>아이디</th>\r\n");
      out.write("						<td><input type=\"text\" id=\"modify_id\" class=\"modifyInput\" name=\"id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ loginUser.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly/></td>\r\n");
      out.write("						<td style=\"text-align: right\">\r\n");
      out.write("							<span class=\"table_In_Infor\" id=\"inforId\">아이디는 수정이 불가합니다</span>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>비밀번호</th>\r\n");
      out.write("						<td><input type=\"password\" id=\"modify_pwd\" class=\"modifyInput\" name=\"pwd\" placeholder=\"비밀번호 변경 시 입력\"/></td>\r\n");
      out.write("						<td class=\"infor_Td\" style=\"text-align: right; width: 225px;\"><label class=\"table_In_Infor\" id=\"inforPwd\"></label></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>비밀번호 확인</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"password\" id=\"modify_rePwd\" class=\"modifyInput\" name=\"rePwd\" placeholder=\"비밀번호 변경 시 입력\"/>\r\n");
      out.write("						</td>\r\n");
      out.write("						<td class=\"infor_Td\" style=\"text-align: right; width: 200px;\">\r\n");
      out.write("							<label class=\"table_In_Infor\" id=\"inforRePwd\"></label>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>이름</th>\r\n");
      out.write("						<td colspan=\"2\"><input type=\"text\" id=\"modify_name\" class=\"modifyInput\" name=\"name\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ loginUser.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"한글 2~6글자 / 영문 2~18글자\"/></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>휴대폰번호</th>\r\n");
      out.write("						<td colspan=\"2\"><input type=\"text\" id=\"modify_phone\" class=\"modifyInput\" name=\"phone\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ loginUser.phone }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"- 포함 입력\"/></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th style=\"border-bottom: none;\">주소</th>\r\n");
      out.write("						<td style=\"border-bottom: none; width: 450px;\">\r\n");
      out.write("							<input type=\"text\" class=\"modifyInput\" id=\"sample4_roadAddress\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ fn:split(loginUser.address, '§§●')[0] }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" readonly>\r\n");
      out.write("							<input type=\"text\" class=\"modifyInput\" id=\"sample4_detailAddress\" placeholder=\"상세 주소 입력\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ fn:split(loginUser.address, '§§●')[1] }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" required=\"required\">\r\n");
      out.write("							<input type=\"hidden\" value=\"\" name=\"address\"/>\r\n");
      out.write("						</td>\r\n");
      out.write("						<td style=\"border-bottom: none;\">\r\n");
      out.write("							<input type=\"button\" id=\"addressSearch\" onclick=\"sample4_execDaumPostcode()\" value=\"주소 찾기\">\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</table>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div>\r\n");
      out.write("				<button type=\"button\" id=\"modify_button\">회원정보 수정</button>\r\n");
      out.write("				<button type=\"button\" id=\"delete_button\">회원탈퇴</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>	\r\n");
      out.write("	<script>\r\n");
      out.write("		function sample4_execDaumPostcode() {\r\n");
      out.write("	        new daum.Postcode({\r\n");
      out.write("	            oncomplete: function(data) {\r\n");
      out.write("	                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("	\r\n");
      out.write("	                // 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\r\n");
      out.write("	                var roadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("	                var detailAddress = ''; // 상세 주소 변수\r\n");
      out.write("	\r\n");
      out.write("	                // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("	                if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("	                	detailAddress += (detailAddress !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("	                }\r\n");
      out.write("	\r\n");
      out.write("	                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("	                document.getElementById(\"sample4_roadAddress\").value = roadAddr;\r\n");
      out.write("	                document.getElementById(\"sample4_detailAddress\").value = detailAddress;\r\n");
      out.write("	              	\r\n");
      out.write("					document.getElementById('sample4_detailAddress').addEventListener('focusout', function() {\r\n");
      out.write("						if(document.getElementById(\"sample4_roadAddress\").value !== '' && document.getElementById('sample4_detailAddress').value != ''){\r\n");
      out.write("							document.getElementsByName('address')[0].value = roadAddr + '§§●' + document.getElementById('sample4_detailAddress').value;\r\n");
      out.write("						}\r\n");
      out.write("					})\r\n");
      out.write("	            },\r\n");
      out.write("	            theme: {\r\n");
      out.write("					bgColor: \"#FFFBF2\", //바탕 배경색\r\n");
      out.write("					searchBgColor: \"#F24822\", //검색창 배경색\r\n");
      out.write("					//contentBgColor: \"\", //본문 배경색(검색결과,결과없음,첫화면,검색서제스트)\r\n");
      out.write("					pageBgColor: \"#F9AE98\", //페이지 배경색\r\n");
      out.write("					textColor: \"#000000\", //기본 글자색\r\n");
      out.write("					queryTextColor:  \"#FFFFFF\", //검색창 글자색\r\n");
      out.write("					postcodeTextColor:  \"#FB9374\", //우편번호 글자색\r\n");
      out.write("					emphTextColor: \"#000000\" //강조 글자색\r\n");
      out.write("				}\r\n");
      out.write("	        }).open();\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("		const inputs = document.getElementsByClassName('modifyInput');\r\n");
      out.write("		const button = document.getElementById('modify_button');\r\n");
      out.write("		let phone = document.getElementById('modify_phone');\r\n");
      out.write("		const regPho = /^01([0|1|6|7|8|9])-([0-9]{3,4})-([0-9]{4})$/;\r\n");
      out.write("		let nameInput = document.getElementById('modify_name');\r\n");
      out.write("		const regName = /^([가-힣]{2,6}|[a-zA-Z]{2,18})$/ \r\n");
      out.write("		\r\n");
      out.write("		button.addEventListener('click', e => {			\r\n");
      out.write("			let count = 0;\r\n");
      out.write("			for(const input of inputs){\r\n");
      out.write("				if(input.value.trim() == '' && input != pwd && input != rePwd){\r\n");
      out.write("					count++;\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(count <= 3 && count > 0){\r\n");
      out.write("				alert('필수 항목을 입력해 주세요.');\r\n");
      out.write("				for(input of inputs){\r\n");
      out.write("					if(input.value == ''){\r\n");
      out.write("						input.focus();\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			} else if(!pwdCheck()){\r\n");
      out.write("				alert('비밀번호가 일치하지 않습니다.');\r\n");
      out.write("				pwd.focus();\r\n");
      out.write("			} else if(inforPwd.innerText.includes('특수문자')){\r\n");
      out.write("				alert('다른 비밀번호를 입력해 주세요.');\r\n");
      out.write("				pwd.focus();\r\n");
      out.write("			} else if(!regPho.test(phone.value)){\r\n");
      out.write("				alert('유효한 전화번호가 아닙니다. 다시 입력해 주세요.');\r\n");
      out.write("				phone.focus();\r\n");
      out.write("			} else if(!regName.test(nameInput.value)) {\r\n");
      out.write("				alert('이름을 다시 입력해 주세요.');\r\n");
      out.write("				nameInput.focus();\r\n");
      out.write("			} else if(count == 0 && ((pwd.value.trim() == '' && rePwd.value.trim() == '') || (pwd.value.trim() != '' && pwdCheck()))) {\r\n");
      out.write("				alert(\"회원정보가 수정되었습니다.\");\r\n");
      out.write("				document.querySelector('form').submit();\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById('delete_button').addEventListener('click', e => {\r\n");
      out.write("			if(confirm('정말 탈퇴하시겠습니까?')){\r\n");
      out.write("				alert('그동안 혼밥심을 이용해 주셔서 감사합니다.');\r\n");
      out.write("				location.href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/delete.user?id=\" + document.getElementById('modify_id').value;\r\n");
      out.write("			} else{\r\n");
      out.write("				console.log('좋은 선택하셨습니다.');\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		let pwd = document.getElementById('modify_pwd');\r\n");
      out.write("		let rePwd = document.getElementById('modify_rePwd');\r\n");
      out.write("		let inforPwd = document.getElementById('inforPwd');\r\n");
      out.write("		let inforRePwd = document.getElementById('inforRePwd');\r\n");
      out.write("		const regPwd = /^[A-Za-z0-9@.]{6,15}$/;\r\n");
      out.write("		\r\n");
      out.write("		pwd.addEventListener('focusout', pwdReg);\r\n");
      out.write("		rePwd.addEventListener('focusout', pwdCheck);\r\n");
      out.write("		\r\n");
      out.write("		function pwdCheck(){\r\n");
      out.write("			if(pwd.value === rePwd.value && pwd.value.trim() != ''){\r\n");
      out.write("				inforRePwd.innerText = '비밀번호가 일치합니다';\r\n");
      out.write("				inforRePwd.style.color = 'green';\r\n");
      out.write("				return true;\r\n");
      out.write("			} else if(pwd.value.trim() != '' && rePwd.value.trim() != '' && pwd.value != rePwd.value) {\r\n");
      out.write("				inforRePwd.innerText = '비밀번호가 일치하지 않습니다';\r\n");
      out.write("				inforRePwd.style.color = 'red';\r\n");
      out.write("				return false;\r\n");
      out.write("			} else if(pwd.value.trim() == '' && rePwd.value.trim() == ''){\r\n");
      out.write("				inforRePwd.innerText = '';\r\n");
      out.write("				return true;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function pwdReg(){\r\n");
      out.write("			if(pwd.value.trim() != '' && !regPwd.test(pwd.value)){\r\n");
      out.write("				inforPwd.innerText = '비밀번호는 6~15자의 영문 대/소문자, 숫자, 특수문자를 사용해 주세요';\r\n");
      out.write("				inforPwd.style.color = 'red';\r\n");
      out.write("				return false;\r\n");
      out.write("			} else {\r\n");
      out.write("				inforPwd.innerText = '';\r\n");
      out.write("				return true;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
